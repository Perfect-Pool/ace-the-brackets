// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract SourceCodesAce {
    string public source8 =
        'const[cmcIds,geckoIdsString]=args;if(secrets.cmcApiKey==="")throw Error("CMC API key not set");const cmcIdArray=cmcIds.split(",").filter(id=>id!=="0"&&id!==""),cmcIdsString=cmcIdArray.join(","),geckoIdArray=geckoIdsString.split(",").filter(id=>id!=="");try{const coinMarketCapRequest=Functions.makeHttpRequest({url:`https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest`,headers:{"X-CMC_PRO_API_KEY":secrets.cmcApiKey},params:{convert:"USD",id:cmcIdsString}}),cmcResponse=await coinMarketCapRequest;if(!cmcResponse.error&&cmcResponse.data&&cmcResponse.data.data){const data=cmcResponse.data.data,idToSymbol={};for(const key in data)idToSymbol[data[key].id]=key;let prices=cmcIdArray.map(id=>{const symbol=idToSymbol[id];return data[symbol]&&data[symbol].quote&&data[symbol].quote.USD?Math.round(data[symbol].quote.USD.price*10**8)===0?1:Math.round(data[symbol].quote.USD.price*10**8):0});while(prices.length<8)prices.push(0);return Functions.encodeString(prices.join(","))}const geckoRequest=Functions.makeHttpRequest({url:`https://api.coingecko.com/api/v3/simple/price`,params:{ids:geckoIdArray.join(","),vs_currencies:"usd",...(secrets.geckoApiKey?{x_cg_demo_api_key:secrets.geckoApiKey}:{})}}),geckoResponse=await geckoRequest;if(geckoResponse.data){let prices=geckoIdArray.map(geckoId=>geckoResponse.data[geckoId]&&geckoResponse.data[geckoId].usd?Math.round(geckoResponse.data[geckoId].usd*10**8)===0?1:Math.round(geckoResponse.data[geckoId].usd*10**8):0);while(prices.length<8)prices.push(0);return Functions.encodeString(prices.join(","))}throw Error("Both CMC and CoinGecko requests failed")}catch(error){throw error}';

    string public source16 =
        'const [cmcIds, geckoIdsString] = args;if (secrets.cmcApiKey === "") throw Error("CMC API key not set");const cmcIdArray = cmcIds.split(",").filter(id => id !== "0" && id !== "");const cmcIdsString = cmcIdArray.join(",");const geckoIdArray = geckoIdsString.split(",").filter(id => id !== "");try {const coinMarketCapRequest = Functions.makeHttpRequest({url: `https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest`,headers: { "X-CMC_PRO_API_KEY": secrets.cmcApiKey },params: {convert: "USD",id: cmcIdsString}});const cmcResponse = await coinMarketCapRequest;if (!cmcResponse.error && cmcResponse.data && cmcResponse.data.data) {const data = cmcResponse.data.data;const idToSymbol = {};for (const key in data) idToSymbol[data[key].id] = key;let prices = cmcIdArray.map(id => {const symbol = idToSymbol[id];if (data[symbol] && data[symbol].quote && data[symbol].quote.USD) return Math.round(data[symbol].quote.USD.price * 10 ** 8) === 0 ? 1 : Math.round(data[symbol].quote.USD.price * 10 ** 8);return 0;});while (prices.length < 16) prices.push(0);return Functions.encodeString(prices.join(","));}const geckoRequest = Functions.makeHttpRequest({url: `https://api.coingecko.com/api/v3/simple/price`,params: {ids: geckoIdArray.join(","),vs_currencies: "usd",...(secrets.geckoApiKey ? { x_cg_demo_api_key: secrets.geckoApiKey } : {})}});const geckoResponse = await geckoRequest;if (geckoResponse.data) {let prices = geckoIdArray.map(geckoId => {if (geckoResponse.data[geckoId] && geckoResponse.data[geckoId].usd) return Math.round(geckoResponse.data[geckoId].usd * 10 ** 8) === 0 ? 1 : Math.round(geckoResponse.data[geckoId].usd * 10 ** 8);return 0;});while (prices.length < 16) prices.push(0);return Functions.encodeString(prices.join(","));}throw Error("Both CMC and CoinGecko requests failed");} catch (error) {throw error;}';
    
    string public sourceTop100 =
        'if(secrets.cmcApiKey==="")throw Error("API keys not set");let lastIndex=parseInt(args[0])||0,itLasts=parseInt(args[1])||0;if(itLasts===0)return Functions.encodeString("");try{const[cmcResponse,geckoResponse]=await Promise.all([Functions.makeHttpRequest({url:`https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest`,headers:{"X-CMC_PRO_API_KEY":secrets.cmcApiKey},params:{start:1,limit:260,sort:"market_cap"}}),Functions.makeHttpRequest({url:`https://api.coingecko.com/api/v3/coins/markets`,params:{vs_currency:"usd",order:"market_cap_desc",per_page:260,page:1,sparkline:false}})]);if(!cmcResponse||!cmcResponse.data||!cmcResponse.data.data)return Functions.encodeString("");if(!geckoResponse||!geckoResponse.data)return Functions.encodeString("");const geckoCoins=new Map;geckoResponse.data.forEach(coin=>{geckoCoins.set(coin.symbol.toLowerCase(),{id:coin.id,name:coin.name.toLowerCase()})});const finalCoins=[],cmcCoins=cmcResponse.data.data;for(let i=lastIndex;i<cmcCoins.length&&finalCoins.length<10&&itLasts>0;i++){const cmcCoin=cmcCoins[i];if(cmcCoin.tags&&cmcCoin.tags.includes("stablecoin")){lastIndex++;continue}const geckoCoin=geckoCoins.get(cmcCoin.symbol.toLowerCase());if(geckoCoin&&geckoCoin.name===cmcCoin.name.toLowerCase()){finalCoins.push({cmc_id:cmcCoin.id,gecko_id:geckoCoin.id,symbol:cmcCoin.symbol});itLasts--}lastIndex++}const returnString=finalCoins.length>0?`${lastIndex};${finalCoins.map(coin=>`${coin.cmc_id},${coin.gecko_id},${coin.symbol}`).join(";")}`:"";return Functions.encodeString(returnString)}catch(error){return Functions.encodeString("")}';

    string public randomString =
        'const size=parseInt(args[0]);if(!size||size<=0)throw Error("Invalid size argument");try{const numbers=Array.from({length:100},(_,i)=>i);for(let i=numbers.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[numbers[i],numbers[j]]=[numbers[j],numbers[i]]}const result=numbers.slice(0,size);return Functions.encodeString(result.join(","))}catch(error){throw error}';
}
