// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

contract SourceCodesAce {
    string public source8 =
        'const coinIdsInput=args[0];if(secrets.apiKey===""){throw Error("Variable not set: apiKey");}const idArrayFilter=coinIdsInput.split(","),coinIds=idArrayFilter.filter(id=>id!=="0"&&id!=="").join(","),coinMarketCapRequest=Functions.makeHttpRequest({url:`https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest?convert=USD&id=${coinIds}`,headers:{"X-CMC_PRO_API_KEY":secrets.apiKey}}),coinMarketCapResponse=await coinMarketCapRequest;if(coinMarketCapResponse.error){throw Error("CoinMarketCap API request failed");}const data=coinMarketCapResponse.data.data,idArray=coinIds.split(","),idToSymbol={};for(const key in data){idToSymbol[data[key].id]=key;}let prices=idArray.map(id=>{const symbol=idToSymbol[id];return data[symbol]&&data[symbol].quote&&data[symbol].quote.USD?Math.round(data[symbol].quote.USD.price*10**8)===0?1:Math.round(data[symbol].quote.USD.price*10**8):0;});while(prices.length<8){prices.push(0);}const pricesString = prices.join(",");return Functions.encodeString(pricesString);';

    string public sourceNew8 =
        'if(secrets.apiKey===""){throw Error("Variable not set: apiKey")}const getRandomUniqueElements=(arr,n)=>{const uniqueById=Array.from(new Map(arr.map((item)=>[item["id"],item])).values());const filtered=uniqueById.filter((item)=>!item.tags.includes("stablecoin"));let result=new Array(n),len=filtered.length,taken=new Array(len);if(n>len){throw new RangeError("getRandomUniqueElements: more elements taken than available")}while(n--){const x=Math.floor(Math.random()*len);result[n]=filtered[x in taken?taken[x]:x];taken[x]=--len in taken?taken[len]:len}return result};const coinMarketCapRequest=Functions.makeHttpRequest({url:`https://pro-api.coinmarketcap.com/v1/cryptocurrency/listings/latest`,headers:{"X-CMC_PRO_API_KEY":secrets.apiKey},params:{start:1,limit:150,sort:"market_cap"}});const response=await coinMarketCapRequest;const coinsData=response.data.data;const selectedCoins=getRandomUniqueElements(coinsData,8);const newGameCoins=selectedCoins.map((coin)=>({id:coin.id,symbol:coin.symbol,tags:coin.tags}));const newGameString=newGameCoins.map((coin)=>`${coin.id},${coin.symbol}`).join(";");return Functions.encodeString(newGameString)';
}
